rmd4j::set_neo4j_engine(neo4j_home = "/installation-3.3.3")
setwd("~/")
rmd4j::set_neo4j_engine(neo4j_home = "/Downloads/neo4j-community-3.3.4")
rmd4j::set_neo4j_engine(neo4j_home = "/Downloads/neo4j-community-3.3.4")
rmd4j::set_neo4j_engine(neo4j_home = "/Downloads/neo4j-community-3.3.4/bin")
rmd4j::set_neo4j_engine(neo4j_home = "/Downloads/neo4j-community-3.3.4")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "/Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j")
knitr::opts_chunk$set(echo = TRUE)
remotes::install_github("ThinkR-open/play4j")
library(play4j)
cypher_con <- play4j::neo4j_shell$new("Downloads/neo4j-community-3.3.4")
cypher_con$cypher_shell
cypher_con$cypher(cypher = "CREATE (matrix:Movie { title:"The Matrix",released:1997 })",
username = "neo4j", password = "Esme10292013", format = "plain")
cypher_con$cypher(cypher = 'CREATE (matrix:Movie { title:"The Matrix",released:1997 })',
username = "neo4j", password = "Esme10292013", format = "plain")
cypher_con$cypher(cypher = "MATCH (n) RETURN n LIMIT 5;")
cypher_con$cypher(cypher = "MATCH (n) RETURN n LIMIT 5;",
username = "neo4j", password = "Esme10292013", format = "plain")
library(ggraph)
cypher_con$cypher(cypher = 'CREATE (cloudAtlas:Movie { title:"Cloud Atlas",released:2012 })
CREATE (forrestGump:Movie { title:"Forrest Gump",released:1994 })
CREATE (keanu:Person { name:"Keanu Reeves", born:1964 })
CREATE (robert:Person { name:"Robert Zemeckis", born:1951 })
CREATE (tom:Person { name:"Tom Hanks", born:1956 })
CREATE (tom)-[:ACTED_IN { roles: ["Forrest"]}]->(forrestGump)
CREATE (tom)-[:ACTED_IN { roles: ['Zachry']}]->(cloudAtlas)
CREATE (robert)-[:DIRECTED]->(forrestGump);',
username = "neo4j", password = "Esme10292013", format = "plain")
cypher_con$cypher(cypher = 'CREATE (cloudAtlas:Movie { title:"Cloud Atlas",released:2012 })
CREATE (forrestGump:Movie { title:"Forrest Gump",released:1994 })
CREATE (keanu:Person { name:"Keanu Reeves", born:1964 })
CREATE (robert:Person { name:"Robert Zemeckis", born:1951 })
CREATE (tom:Person { name:"Tom Hanks", born:1956 })
CREATE (tom)-[:ACTED_IN { roles: ["Forrest"]}]->(forrestGump)
CREATE (tom)-[:ACTED_IN { roles: ["Zachry"]}]->(cloudAtlas)
CREATE (robert)-[:DIRECTED]->(forrestGump);',
username = "neo4j", password = "Esme10292013", format = "plain")
cypher_con$cypher(cypher = "MATCH (n) RETURN n LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain")
cypher_con$cypher(cypher = "MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain")
n <- cypher_con$cypher(cypher = "MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain")
n
api_con <- play4j::neo4j_api$new(url = "http://localhost:7474", user = "neo4j", password = "esme10292013")
api_con$query("MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15")
n <- api_con$query("MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15")
cypher_con$cypher(cypher = "MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain")
n
api_con$query("MATCH (n) RETURN n LIMIT 15")
api_con$query("MATCH (n) RETURN n LIMIT 15", format = "R")
cypher_con$cypher(cypher = "MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain")
cypher_con$cypher(cypher = "MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain") %>%
call_api(con, type = "graph") %>%
convert_to("igraph") %>%
ggraph() +
geom_node_label(aes(label = name, color = group)) +
geom_edge_link() +
theme_graph
library(rmd4j)
setwd("~/Downloads/neo4j-community-3.3.4")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
setwd("~/")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
knitr::opts_chunk$set(echo = TRUE)
getwd("/")
getwd("")
getwd()
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
knitr::opts_chunk$set(echo = TRUE)
knit_engines$set
chunk4j <- function(){
a <- rstudioapi::getSourceEditorContext()
rstudioapi::insertText(location = a$selection[[1]]$range, text = "\n```{neo4j}\n\n```\n")
}
chunk4j()
chunk4j()
files_in_home <- list.files(path = options$neo4j_home, recursive = TRUE)
rmd4j::files_in_home <- list.files(path = options$neo4j_home, recursive = TRUE)
rmd4j::set_neo4j_engine(neo4j_home = "/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
rmd4j::files_in_home <- list.files(path = options$neo4j_home, recursive = TRUE)
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
rmd4j::files_in_home <- list.files(path = options$neo4j_home, recursive = TRUE)
opts_chunk$set(neo4j_home = neo4j_home,
neo4j_user = neo4j_user,
neo4j_passwd = neo4j_passwd,
neo4j_format = neo4j_format,
neo4j_adress = neo4j_adress,
comments = "")
library(knitr)
opts_chunk$set(neo4j_home = neo4j_home,
neo4j_user = neo4j_user,
neo4j_passwd = neo4j_passwd,
neo4j_format = neo4j_format,
neo4j_adress = neo4j_adress,
comments = "")
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
opts_chunk$set(neo4j_home = neo4j_home,
neo4j_user = neo4j_user,
neo4j_passwd = neo4j_passwd,
neo4j_format = neo4j_format,
neo4j_adress = neo4j_adress,
comments = "")
opts_chunk$set(neo4j_home = "Downloads/neo4j-community-3.3.4",
neo4j_user = "neo4j",
neo4j_passwd = "Esme10292013",
neo4j_format = "verbose",
neo4j_adress = "bolt://0.0.0.0:7687",
comments = "")
knit_engines$set(neo4j = function(options) {
if (options$eval) {
options$code_to_eval <- clean_input(options$code)
out <- encypher_for_knitr(options)
#out <- options$code_to_eval
}
engine_output(options, options$code, out)
})
}
knit_engines$set(neo4j = function(options) {
if (options$eval) {
options$code_to_eval <- clean_input(options$code)
out <- encypher_for_knitr(options)
#out <- options$code_to_eval
}
engine_output(options, options$code, out)
}
)
files_in_home <- list.files(path = options$neo4j_home, recursive = TRUE)
files_in_home <- list.files(path = "Downloads/neo4j-community-3.3.4", recursive = TRUE)
cypher_shell <- grep("cypher-shell(\\.bat)*$", files_in_home, value = TRUE)
options$cypher_bin <- normalizePath(file.path(options$neo4j_home, cypher_shell))
cypher_bin <- normalizePath(file.path("Downloads/neo4j-community-3.3.4", cypher_shell))
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
knitr::opts_chunk$set(echo = TRUE)
cypher_con <- play4j::neo4j_shell$new("Downloads/neo4j-community-3.3.4")
cypher_con$cypher_shell
cypher_con$cypher(cypher = 'CREATE (matrix:Movie { title:"The Matrix",released:1997 })',
username = "neo4j", password = "Esme10292013", format = "plain")
View(api_con)
View(api_con)
setwd("~/")
library(rmd4j)
library(knitr)
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
# Note : be sure to have a Neo4J connection running
rmd4j::set_neo4j_engine(neo4j_home = "/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
knitr::opts_chunk$set(echo = TRUE)
# Note : be sure to have a Neo4J connection running
knitr::opts_knit$set(root.dir = "~/")
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
# Note : be sure to have a Neo4J connection running
knitr::opts_knit$set(root.dir = "~/")
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
rmd4j::set_neo4j_engine(neo4j_home = "Downloads", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
rmd4j::set_neo4j_engine(neo4j_home = "/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://0.0.0.0:7687")
knitr::opts_chunk$set(echo = TRUE)
# Note : be sure to have a Neo4J connection running
knitr::opts_knit$set(root.dir = "~/")
library(play4j)
library(ggraph)
cypher_con <- play4j::neo4j_shell$new("Downloads/neo4j-community-3.3.4")
cypher_con$cypher_shell
cypher_con$cypher(cypher = "MATCH (n) RETURN n LIMIT 5;",
username = "neo4j", password = "Esme10292013", format = "plain")
api_con <- play4j::neo4j_api$new(url = "http://0.0.0.0:7474/", user = "neo4j", password = "esme10292013")
api_con$query("MATCH (n) RETURN n LIMIT 15", format = "R") ## not working
n <- api_con$query("MATCH (n) RETURN n LIMIT 15", format = "R") ## not working
cypher_con$cypher(cypher = "MATCH (n) RETURN n LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain")
n <- api_con$query("MATCH (n) RETURN n LIMIT 15;", format = "R") ## not working
api_con <- play4j::neo4j_api$new(url = "http://0.0.0.0:7474/", user = "neo4j", password = "Esme10292013")
n <- api_con$query("MATCH (n) RETURN n LIMIT 15;", format = "R") ## not working
n <- api_con$query("MATCH (n) RETURN n LIMIT 15", format = "R") ## not working
api_con$query("MATCH (n) RETURN n LIMIT 15", format = "R") ## not working
api_con$query("MATCH (n) RETURN n LIMIT 15") ## not working
api_con$query("MATCH (n) RETURN n LIMIT 1") ## not working
api_con$query("MATCH (n) RETURN n") ## not working
cypher_con$cypher(cypher = "MATCH (n) RETURN n;",
username = "neo4j", password = "Esme10292013", format = "plain")
api_con$query("MATCH (p:Person) RETURN p.name LIMIT 1") ## not working
cypher_con$cypher(cypher = "MATCH (p:Person) RETURN p.name LIMIT 1",
username = "neo4j", password = "Esme10292013", format = "plain")
format <- match.arg(format)
auth <- base64_enc(paste0('neo4j',':','Esme10292013'))
auth <- jsonlite::base64_enc(paste0('neo4j',':','Esme10292013'))
query <- "MATCH (p:Person) RETURN p.name LIMIT 1"
res <- httr::POST(url = "http://0.0.0.0:7474/",
httr::add_headers(.headers = c("Content-Type"="application/json",
"accept"="application/json",
"Authorization"= paste0("Basic ", auth))),
body = glue::glue('{"statements" : [ { "statement" : "%query%"} ]}', .open = "%", .close = "%"))
lapply(content(res)$results, function(x) x$data)
lapply(httr::content(res)$results, function(x) x$data)
httr::content(res)
res <- httr::POST(url = "http://localhost:7474/",
httr::add_headers(.headers = c("Content-Type"="application/json",
"accept"="application/json",
"Authorization"= paste0("Basic ", auth))),
body = glue::glue('{"statements" : [ { "statement" : "%query%"} ]}', .open = "%", .close = "%"))
library(play4j)
library(ggraph)
cypher_con <- play4j::neo4j_shell$new("Downloads/neo4j-community-3.3.4")
cypher_con$cypher_shell
cypher_con$cypher(cypher = "MATCH (n) RETURN n LIMIT 5;",
username = "neo4j", password = "Esme10292013", format = "plain")
api_con <- play4j::neo4j_api$new(url = "http://localhost:7474/", user = "neo4j", password = "Esme10292013")
api_con$query("MATCH (p:Person) RETURN p.name LIMIT 1") ## not working
cypher_con$cypher(cypher = "MATCH (p:Person) RETURN p.name LIMIT 1",
username = "neo4j", password = "Esme10292013", format = "plain")
auth <- jsonlite::base64_enc(paste0('neo4j',':','Esme10292013'))
query <- "MATCH (p:Person) RETURN p.name LIMIT 1"
res <- httr::POST(url = "http://localhost:7474/",
httr::add_headers(.headers = c("Content-Type"="application/json",
"accept"="application/json",
"Authorization"= paste0("Basic ", auth))),
body = glue::glue('{"statements" : [ { "statement" : "%query%"} ]}', .open = "%", .close = "%"))
View(api_con)
rmd4j::set_neo4j_engine(neo4j_home = "/", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j",
neo4j_adress = "bolt://localhost:7687")
knitr::opts_chunk$set(echo = TRUE)
# Note : be sure to have a Neo4J connection running
knitr::opts_knit$set(root.dir = "~/")
cypher_con$cypher(cypher = "MATCH p=()-[r:ACTED_IN]->() RETURN p LIMIT 15;",
username = "neo4j", password = "Esme10292013", format = "plain")
auth <- jsonlite::base64_enc(paste0('neo4j',':','Esme10292013'))
query <- "MATCH (p:Person) RETURN p.name LIMIT 1"
res <- httr::POST(url = "bolt://localhost:7687",
httr::add_headers(.headers = c("Content-Type"="application/json",
"accept"="application/json",
"Authorization"= paste0("Basic ", auth))),
body = glue::glue('{"statements" : [ { "statement" : "%query%"} ]}', .open = "%", .close = "%"))
rmd4j::set_neo4j_engine(neo4j_home = "Downloads/neo4j-community-3.3.4", # Insert the path to your Neo4J home
neo4j_passwd = "Esme10292013",
neo4j_user = "neo4j")
knitr::opts_chunk$set(echo = TRUE)
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
setwd("~/Documents/michaelpawlus.github.io.git/trunk")
rmd2md()
library(tidyverse)
# get data
epl <- read_csv("http://www.football-data.co.uk/mmz4281/1718/E0.csv")
# get possible results
unique(epl$FTR)
# isolate 0-0 draws
epl %>%
filter(FTR == "D" & FTHG == 0 & FTAG == 0)
# remove 0-0 draws
epl <- epl %>%
filter(FTHG > 0 | FTAG > 0)
home_wins <- epl %>%
filter(FTR == "H") %>%
select(HomeTeam, FTHG, FTR) %>%
rename(team = HomeTeam, goals = FTHG) %>%
#rename(goals = FTHG) %>%
mutate(points = 3)
home_loss <- epl %>%
filter(FTR == "A") %>%
select(HomeTeam, FTHG, FTR) %>%
rename(team = HomeTeam, goals = FTHG) %>%
mutate(points = 0)
away_wins <- epl %>%
filter(FTR == "A") %>%
select(AwayTeam, FTAG, FTR) %>%
rename(team = AwayTeam, goals = FTAG) %>%
mutate(points = 3)
away_loss <- epl %>%
filter(FTR == "H") %>%
select(AwayTeam, FTAG, FTR) %>%
rename(team = AwayTeam, goals = FTAG) %>%
mutate(points = 0)
home_draws <- epl %>%
filter(FTR == "D") %>%
select(HomeTeam, FTHG, FTR) %>%
rename(team = HomeTeam, goals = FTHG) %>%
mutate(points = 1)
away_draws <- epl %>%
filter(FTR == "D") %>%
select(AwayTeam, FTAG, FTR) %>%
rename(team = AwayTeam, goals = FTAG) %>%
mutate(points = 1)
goals_to_points <- bind_rows(home_wins, home_loss, away_wins, away_loss, home_draws, away_draws)
goals_to_points %>%
group_by(team) %>%
summarise(goals = sum(goals), points = sum(points), goal_point_value = points/goals) %>%
mutate(team = fct_reorder(team, goal_point_value)) %>%
ggplot(aes(y = goal_point_value, x = team, fill = team)) +
geom_col() +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.major.y = element_line(color = "light grey", size = 0.25),
legend.position="none") +
scale_fill_manual(values = c("#091453","#F7C240","#ED1A3B","#00A398","#EF0107","#0053A0","#E03A3E","#FBEE23","#1B458F","#E62333","#98C5E9","#001C58","#DBA111","#274488","#241F20","#F8BC1B","#0073D2","#000000","#DA020E","#8CCCE5")) +
labs(x = NULL, y = NULL, title = "Premier League Point Value Per Goal")
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
